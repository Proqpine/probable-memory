// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: activities.sql

package sqlite

import (
	"context"
	"database/sql"
	"time"
)

const insertActivity = `-- name: InsertActivity :one
insert into activities (start_time, end_time, duration, activity_name, description, project, notes) values (?, ?, ?, ?, ?, ?, ?) returning id, start_time, end_time, duration, activity_name, description, project, notes
`

type InsertActivityParams struct {
	StartTime    time.Time
	EndTime      sql.NullTime
	Duration     sql.NullInt64
	ActivityName string
	Description  string
	Project      string
	Notes        string
}

func (q *Queries) InsertActivity(ctx context.Context, arg InsertActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, insertActivity,
		arg.StartTime,
		arg.EndTime,
		arg.Duration,
		arg.ActivityName,
		arg.Description,
		arg.Project,
		arg.Notes,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.EndTime,
		&i.Duration,
		&i.ActivityName,
		&i.Description,
		&i.Project,
		&i.Notes,
	)
	return i, err
}

const queryActivities = `-- name: QueryActivities :many
select id, start_time, end_time, duration, activity_name, description, project, notes from activities
`

func (q *Queries) QueryActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, queryActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.StartTime,
			&i.EndTime,
			&i.Duration,
			&i.ActivityName,
			&i.Description,
			&i.Project,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryActivityByProject = `-- name: QueryActivityByProject :one
select id, start_time, end_time, duration, activity_name, description, project, notes from activities where project=?
`

func (q *Queries) QueryActivityByProject(ctx context.Context, project string) (Activity, error) {
	row := q.db.QueryRowContext(ctx, queryActivityByProject, project)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.EndTime,
		&i.Duration,
		&i.ActivityName,
		&i.Description,
		&i.Project,
		&i.Notes,
	)
	return i, err
}

const updateActivity = `-- name: UpdateActivity :one
update activities
set start_time = ?,
    end_time = ?,
    duration = ?,
    activity_name = ?,
    description = ?,
    project = ?,
    notes = ?
where id = ?
returning id, start_time, end_time, duration, activity_name, description, project, notes
`

type UpdateActivityParams struct {
	StartTime    time.Time
	EndTime      sql.NullTime
	Duration     sql.NullInt64
	ActivityName string
	Description  string
	Project      string
	Notes        string
	ID           interface{}
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, updateActivity,
		arg.StartTime,
		arg.EndTime,
		arg.Duration,
		arg.ActivityName,
		arg.Description,
		arg.Project,
		arg.Notes,
		arg.ID,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.EndTime,
		&i.Duration,
		&i.ActivityName,
		&i.Description,
		&i.Project,
		&i.Notes,
	)
	return i, err
}
